// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/dataCollection/v1/config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	// 更新指定设备的配置
	UpdateDeviceConfig0(ctx context.Context, in *DeviceConfig0, opts ...grpc.CallOption) (*ConfigServiceReply0, error)
	// 用于和底层设备客户端建立用于配置更新的grpc数据流
	CreateConfigUpdateStream0(ctx context.Context, opts ...grpc.CallOption) (Config_CreateConfigUpdateStream0Client, error)
	// 从底层数据客户端收集设备初始配置
	CreateInitialConfigSaveStream0(ctx context.Context, opts ...grpc.CallOption) (Config_CreateInitialConfigSaveStream0Client, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) UpdateDeviceConfig0(ctx context.Context, in *DeviceConfig0, opts ...grpc.CallOption) (*ConfigServiceReply0, error) {
	out := new(ConfigServiceReply0)
	err := c.cc.Invoke(ctx, "/api.dataCollection.v1.Config/UpdateDeviceConfig0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateConfigUpdateStream0(ctx context.Context, opts ...grpc.CallOption) (Config_CreateConfigUpdateStream0Client, error) {
	stream, err := c.cc.NewStream(ctx, &Config_ServiceDesc.Streams[0], "/api.dataCollection.v1.Config/CreateConfigUpdateStream0", opts...)
	if err != nil {
		return nil, err
	}
	x := &configCreateConfigUpdateStream0Client{stream}
	return x, nil
}

type Config_CreateConfigUpdateStream0Client interface {
	Send(*ConfigUpdateReply0) error
	Recv() (*DeviceConfig0, error)
	grpc.ClientStream
}

type configCreateConfigUpdateStream0Client struct {
	grpc.ClientStream
}

func (x *configCreateConfigUpdateStream0Client) Send(m *ConfigUpdateReply0) error {
	return x.ClientStream.SendMsg(m)
}

func (x *configCreateConfigUpdateStream0Client) Recv() (*DeviceConfig0, error) {
	m := new(DeviceConfig0)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configClient) CreateInitialConfigSaveStream0(ctx context.Context, opts ...grpc.CallOption) (Config_CreateInitialConfigSaveStream0Client, error) {
	stream, err := c.cc.NewStream(ctx, &Config_ServiceDesc.Streams[1], "/api.dataCollection.v1.Config/CreateInitialConfigSaveStream0", opts...)
	if err != nil {
		return nil, err
	}
	x := &configCreateInitialConfigSaveStream0Client{stream}
	return x, nil
}

type Config_CreateInitialConfigSaveStream0Client interface {
	Send(*DeviceConfig0) error
	CloseAndRecv() (*ConfigServiceReply0, error)
	grpc.ClientStream
}

type configCreateInitialConfigSaveStream0Client struct {
	grpc.ClientStream
}

func (x *configCreateInitialConfigSaveStream0Client) Send(m *DeviceConfig0) error {
	return x.ClientStream.SendMsg(m)
}

func (x *configCreateInitialConfigSaveStream0Client) CloseAndRecv() (*ConfigServiceReply0, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ConfigServiceReply0)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigServer is the server API for Config service.
// All implementations must embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	// 更新指定设备的配置
	UpdateDeviceConfig0(context.Context, *DeviceConfig0) (*ConfigServiceReply0, error)
	// 用于和底层设备客户端建立用于配置更新的grpc数据流
	CreateConfigUpdateStream0(Config_CreateConfigUpdateStream0Server) error
	// 从底层数据客户端收集设备初始配置
	CreateInitialConfigSaveStream0(Config_CreateInitialConfigSaveStream0Server) error
	mustEmbedUnimplementedConfigServer()
}

// UnimplementedConfigServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) UpdateDeviceConfig0(context.Context, *DeviceConfig0) (*ConfigServiceReply0, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConfig0 not implemented")
}
func (UnimplementedConfigServer) CreateConfigUpdateStream0(Config_CreateConfigUpdateStream0Server) error {
	return status.Errorf(codes.Unimplemented, "method CreateConfigUpdateStream0 not implemented")
}
func (UnimplementedConfigServer) CreateInitialConfigSaveStream0(Config_CreateInitialConfigSaveStream0Server) error {
	return status.Errorf(codes.Unimplemented, "method CreateInitialConfigSaveStream0 not implemented")
}
func (UnimplementedConfigServer) mustEmbedUnimplementedConfigServer() {}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_UpdateDeviceConfig0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceConfig0)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateDeviceConfig0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataCollection.v1.Config/UpdateDeviceConfig0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateDeviceConfig0(ctx, req.(*DeviceConfig0))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateConfigUpdateStream0_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigServer).CreateConfigUpdateStream0(&configCreateConfigUpdateStream0Server{stream})
}

type Config_CreateConfigUpdateStream0Server interface {
	Send(*DeviceConfig0) error
	Recv() (*ConfigUpdateReply0, error)
	grpc.ServerStream
}

type configCreateConfigUpdateStream0Server struct {
	grpc.ServerStream
}

func (x *configCreateConfigUpdateStream0Server) Send(m *DeviceConfig0) error {
	return x.ServerStream.SendMsg(m)
}

func (x *configCreateConfigUpdateStream0Server) Recv() (*ConfigUpdateReply0, error) {
	m := new(ConfigUpdateReply0)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Config_CreateInitialConfigSaveStream0_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigServer).CreateInitialConfigSaveStream0(&configCreateInitialConfigSaveStream0Server{stream})
}

type Config_CreateInitialConfigSaveStream0Server interface {
	SendAndClose(*ConfigServiceReply0) error
	Recv() (*DeviceConfig0, error)
	grpc.ServerStream
}

type configCreateInitialConfigSaveStream0Server struct {
	grpc.ServerStream
}

func (x *configCreateInitialConfigSaveStream0Server) SendAndClose(m *ConfigServiceReply0) error {
	return x.ServerStream.SendMsg(m)
}

func (x *configCreateInitialConfigSaveStream0Server) Recv() (*DeviceConfig0, error) {
	m := new(DeviceConfig0)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dataCollection.v1.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDeviceConfig0",
			Handler:    _Config_UpdateDeviceConfig0_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateConfigUpdateStream0",
			Handler:       _Config_CreateConfigUpdateStream0_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateInitialConfigSaveStream0",
			Handler:       _Config_CreateInitialConfigSaveStream0_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/dataCollection/v1/config.proto",
}
