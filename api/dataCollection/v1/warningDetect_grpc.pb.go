// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/dataCollection/v1/warningDetect.proto

package v1

import (
	context "context"
	v1 "gitee.com/moyusir/util/api/util/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarningDetectClient is the client API for WarningDetect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarningDetectClient interface {
	// 设备状态信息收集服务
	CreateDeviceStateInfoStream(ctx context.Context, opts ...grpc.CallOption) (WarningDetect_CreateDeviceStateInfoStreamClient, error)
}

type warningDetectClient struct {
	cc grpc.ClientConnInterface
}

func NewWarningDetectClient(cc grpc.ClientConnInterface) WarningDetectClient {
	return &warningDetectClient{cc}
}

func (c *warningDetectClient) CreateDeviceStateInfoStream(ctx context.Context, opts ...grpc.CallOption) (WarningDetect_CreateDeviceStateInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &WarningDetect_ServiceDesc.Streams[0], "/api.dataCollection.v1.WarningDetect/CreateDeviceStateInfoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &warningDetectCreateDeviceStateInfoStreamClient{stream}
	return x, nil
}

type WarningDetect_CreateDeviceStateInfoStreamClient interface {
	Send(*v1.TestedDeviceState) error
	Recv() (*WarningDetectServiceReply, error)
	grpc.ClientStream
}

type warningDetectCreateDeviceStateInfoStreamClient struct {
	grpc.ClientStream
}

func (x *warningDetectCreateDeviceStateInfoStreamClient) Send(m *v1.TestedDeviceState) error {
	return x.ClientStream.SendMsg(m)
}

func (x *warningDetectCreateDeviceStateInfoStreamClient) Recv() (*WarningDetectServiceReply, error) {
	m := new(WarningDetectServiceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WarningDetectServer is the server API for WarningDetect service.
// All implementations must embed UnimplementedWarningDetectServer
// for forward compatibility
type WarningDetectServer interface {
	// 设备状态信息收集服务
	CreateDeviceStateInfoStream(WarningDetect_CreateDeviceStateInfoStreamServer) error
	mustEmbedUnimplementedWarningDetectServer()
}

// UnimplementedWarningDetectServer must be embedded to have forward compatible implementations.
type UnimplementedWarningDetectServer struct {
}

func (UnimplementedWarningDetectServer) CreateDeviceStateInfoStream(WarningDetect_CreateDeviceStateInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateDeviceStateInfoStream not implemented")
}
func (UnimplementedWarningDetectServer) mustEmbedUnimplementedWarningDetectServer() {}

// UnsafeWarningDetectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarningDetectServer will
// result in compilation errors.
type UnsafeWarningDetectServer interface {
	mustEmbedUnimplementedWarningDetectServer()
}

func RegisterWarningDetectServer(s grpc.ServiceRegistrar, srv WarningDetectServer) {
	s.RegisterService(&WarningDetect_ServiceDesc, srv)
}

func _WarningDetect_CreateDeviceStateInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WarningDetectServer).CreateDeviceStateInfoStream(&warningDetectCreateDeviceStateInfoStreamServer{stream})
}

type WarningDetect_CreateDeviceStateInfoStreamServer interface {
	Send(*WarningDetectServiceReply) error
	Recv() (*v1.TestedDeviceState, error)
	grpc.ServerStream
}

type warningDetectCreateDeviceStateInfoStreamServer struct {
	grpc.ServerStream
}

func (x *warningDetectCreateDeviceStateInfoStreamServer) Send(m *WarningDetectServiceReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *warningDetectCreateDeviceStateInfoStreamServer) Recv() (*v1.TestedDeviceState, error) {
	m := new(v1.TestedDeviceState)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WarningDetect_ServiceDesc is the grpc.ServiceDesc for WarningDetect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarningDetect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dataCollection.v1.WarningDetect",
	HandlerType: (*WarningDetectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateDeviceStateInfoStream",
			Handler:       _WarningDetect_CreateDeviceStateInfoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/dataCollection/v1/warningDetect.proto",
}
